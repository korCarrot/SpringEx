<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">
<!--    <bean class="com.green.springex.sample.SampleDAO"></bean>-->
<!--    <bean class="com.green.springex.sample.SampleService"></bean>-->

<!--
<context:component-scan>
 스프링 컨테이너가 자동으로 빈을 검색하고 등록할 패키지를 지정할 수 있습니다.
 일반적으로 스프링 애플리케이션에서 @Component, @Service, @Repository, @Controller 등의 애노테이션이 지정된 클래스를 찾아서 빈으로 등록하기 위해 사용됩니다.

 <context:component-scan>은 다음과 같은 주요 속성을 포함할 수 있습니다:
base-package: 컴포넌트 스캔을 수행할 기본 패키지를 지정합니다. 이 속성은 반드시 지정되어야 합니다.
use-default-filters: 기본 필터를 사용할지 여부를 결정합니다. 기본값은 true이며, 기본 필터는 @Component, @Repository, @Service, @Controller 애노테이션이 지정된 클래스를 스캔합니다.
include-filter: 포함할 빈을 필터링하는 데 사용됩니다. 이 속성은 type, expression, regex, aspectj 등의 속성을 사용하여 세부적인 필터링을 정의할 수 있습니다.
exclude-filter: 제외할 빈을 필터링하는 데 사용됩니다. 사용법은 include-filter와 유사합니다.
-->

    <!--    <context:component-scan base-package="com.green.springex.sample" />-->
    <context:component-scan base-package="com.green.springex" />





    <!--HikariCP 설정-->
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <property name="driverClassName" value="org.mariadb.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mariadb://localhost:3306/webdb"></property>
        <property name="username" value="webuser"></property>
        <property name="password" value="webuser"></property>
        <property name="dataSourceProperties">
            <props>
                <prop key="cachePrepStmts">true</prop>
                <prop key="prepStmtCacheSize">250</prop>
                <prop key="prepStmtCacheSqlLimit">2048</prop>
            </props>
        </property>
    </bean>

    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
          destroy-method="close">
        <constructor-arg ref="hikariConfig" />
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:/mappers/**/*.xml" />
        <!-- classpath:/mappers/**/*.xml는 mappers 디렉토리와 그 하위 디렉토리에 있는 모든 XML 파일을 찾습니다. -->
    </bean>

    <mybatis:scan base-package="com.green.springex.mapper" />

<!--  resources는 'classpath:'접두어를 이용해서 인식되는 경로
      mappers폴더 밑에 폴더가 있어도 관계없도록 '**'와 모든 '.xml'을 의미하는 '*.xml'을 지정 -->

</beans>